class Solution {
    public int[] frequencySort(int[] nums) {
        int k = 0;
        Map<Integer, Integer> frequencyMap = new TreeMap<>();
        Set<Number> sortedMap = new TreeSet<>(
            new Comparator<Number>(){
                @Override
                public int compare(Number a, Number b){
                    if(a.freq != b.freq)
                        return Integer.compare(a.freq, b.freq);
                    else{
                        if(b.val > a.val)
                            return Integer.compare(a.val, b.val);
                        else
                            return Integer.compare(b.val, a.val);
                    }
                }
            }
        );
        
        for(int num : nums){
            int count = frequencyMap.containsKey(num) ? frequencyMap.get(num) + 1 : 1;
            frequencyMap.put(num, count);
        }
        
        for(Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()){
            sortedMap.add(new Number(entry.getKey(), entry.getValue()));
        }
        
        for(Number number : sortedMap.toArray(new Number[0])){
            for(int i = 0; i < number.freq; i++){
                nums[k] = number.val;
                k++;
            }
        }
        
        return nums;   
    }
    
    static class Number{
        int val;
        int freq;
        
        public Number(int _val, int _freq){
            val = _val;
            freq = _freq;
        }
        
        public String toString(){
            return "(val="+val+", freq="+freq+")";
        }
    }
}
